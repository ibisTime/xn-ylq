<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<context:component-scan base-package="com.xnjr">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
  <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
       <property name="triggers">  
           <list>
           	  <ref bean="borrowTrigger"/>
           	  <ref bean="stageTrigger"/>
           	  <ref bean="certificationTrigger"/>
           	  <ref bean="userCouponTrigger"/>
           	  <ref bean="repayRemindTrigger"/>
           	  <!-- <ref bean="doInsertStatisticDailyTrigger"/> -->
          </list>  
       </property>  
       <property name="autoStartup" value="true"/>  
    </bean> 
	
 	<bean id="borrowTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
       <property name="jobDetail" ref="doCheckOverdueDaily"/>  
       <property name="cronExpression" value="0 0 0 * * ?"/><!-- 每天0点执行 -->
	</bean>
	<bean id="doCheckOverdueDaily" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">   
	        <property name="targetObject" ref="borrowOrderAOImpl"/>  
	        <property name="targetMethod" value="doCheckOverdueDaily"/>  
	        <property name="concurrent" value="false"/>   <!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程  --> 
	</bean>
	
	<bean id="stageTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
       <property name="jobDetail" ref="doCheckStageDaily"/>  
       <property name="cronExpression" value="0 0 0 * * ?"/><!-- 每天0点执行 -->
	</bean>
	<bean id="doCheckStageDaily" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">   
	        <property name="targetObject" ref="borrowOrderAOImpl"/>  
	        <property name="targetMethod" value="doCheckStageDaily"/>  
	        <property name="concurrent" value="false"/>   <!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程  --> 
	</bean>
	
	<bean id="repayRemindTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
       <property name="jobDetail" ref="doCheckWillRepayDaily"/>  
       <property name="cronExpression" value="0 0 17 * * ?"/><!-- 每天17点执行 -->
	</bean>
	<bean id="doCheckWillRepayDaily" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">   
	        <property name="targetObject" ref="borrowOrderAOImpl"/>  
	        <property name="targetMethod" value="doCheckWillRepayDaily"/>  
	        <property name="concurrent" value="false"/>   <!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程  --> 
	</bean>
	
	
	
	
	<bean id="certificationTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
       <property name="jobDetail" ref="doCheckValidDaily"/>  
       <property name="cronExpression" value="0 0 0 * * ?"/><!-- 每天0点执行 -->
	</bean>
	<bean id="doCheckValidDaily" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">   
	        <property name="targetObject" ref="certificationAOImpl"/>  
	        <property name="targetMethod" value="doCheckValidDaily"/>  
	        <property name="concurrent" value="false"/>   <!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程  --> 
	</bean>
	
	<bean id="userCouponTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
       <property name="jobDetail" ref="doCheckUserCouponInvalidDaily"/>  
       <property name="cronExpression" value="0 0 0 * * ?"/><!-- 每天0点执行 -->
	</bean>
	<bean id="doCheckUserCouponInvalidDaily" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">   
	        <property name="targetObject" ref="userCouponAOImpl"/>  
	        <property name="targetMethod" value="doCheckUserCouponInvalidDaily"/>  
	        <property name="concurrent" value="false"/>   <!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程  --> 
	</bean>
	
	<!-- <bean id="doInsertStatisticDailyTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
       <property name="jobDetail" ref="doInsertStatisticDaily"/>  
       <property name="cronExpression" value="50 59 23 * * ?"/> 每天0点执行
       <property name="cronExpression" value="1 * * * * ?"/>
       <property name="cronExpression" value="0 */10 * * * ?"/>每10分钟执行
	</bean>
	<bean id="doInsertStatisticDaily" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">   
	        <property name="targetObject" ref="statisticAOImpl"/>  
	        <property name="targetMethod" value="doInsertStatisticDaily"/>  
	        <property name="concurrent" value="false"/>   是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程  
	</bean> -->
	
	
</beans>
